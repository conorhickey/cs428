#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include "image.h"

void usage(void)
{
    printf("usage: zoom [-f n] infile outfile\n");
}

int main(int argc, char *argv[])
{
    char ch;
	int factor;
	FILE *inf, *outf;
	struct image img;


    while ((ch = getopt(argc, argv, "f:h")) != -1) {
        switch (ch) {
        case 'h':
            usage();
            exit(0);
            break;
        case 'f':
            factor = atoi(optarg);
            break;
        default:
            break;
        }
    }
    argc -= optind;
    argv += optind;

    if (argc != 2) {
        usage();
        exit(0);
    }

	inf = fopen(argv[0],"r");
	if (inf == NULL){
	printf("No open FIle \n");
	exit(0);
	} 

	outf = fopen(argv[1],"w");
	if (outf == NULL){
	printf("No out FIle \n");
	exit(0);
	} 
	
	imbread(inf,&img);
	imbzoomwrite(outf,&img, factor);
	return 0 ;
}


int imbzoomwrite(FILE *fp, struct image *im,int factor)
{
    int i;
	int j;
	int z;
	uint16_t temp;

	uint32_t rows = im->rows, cols = im->cols; 
	uint64_t farb = htobe64(0x6661726266656c64);
	fwrite(&farb,8,1,fp);
	fwrite(&rows,4,1,fp);
	fwrite(&cols,4,1,fp);
	struct pixel *pixP;
	pixP = im->pixbuf;
	
	//for(z=0; z< (im->rows);z++){
		for(i= 0; i < (im->cols*rows*factor); i++){
		pixP= im->pixbuf;
		pixP= pixP+i;
			for(j=0; j <factor;j++){
				printf("%d\n",j);
				temp = htobe16(pixP->r);
				fwrite(&temp,2,1,fp);
				temp = htobe16(pixP->g);
				fwrite(&temp,2,1,fp);
				temp = htobe16(pixP->b);
				fwrite(&temp,2,1,fp);
				temp = htobe16(pixP->a);
				fwrite(&temp,2,1,fp);
			}
		}
	//}
	
	return 0;
}
